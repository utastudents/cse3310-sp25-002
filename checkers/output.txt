[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m------------------------< [0;36mcse3310.uta:checkers[0;1m >------------------------[m
[[1;34mINFO[m] [1mBuilding checkers 1.0-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mexec-maven-plugin:3.5.0:java[m [1m(default-cli)[m @ [36mcheckers[0;1m ---[m
http Server started on port: 9080
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
PageManager components initialized.
PageManager initialized with App reference.
websocket Server started on port: 9180
Hello World!
Outbound message queue processor started.
A new connection has been opened
Connection opened: /[0:0:0:0:0:0:0:1]:61751, assigning Client ID: 2
sending assigned ID: {"clientId":2,"type":"assign_id"} to 2
Processing join request for player: fXeK!2heyt (ID: 2)
Received username: fXeK!2heyt
201 Username Created
Mapped playerName fXeK!2heyt to connection ID 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"playerName":"fXeK!2heyt","Status":"Success","Message":"Username accepted.","gameOver":false,"draw":false,"id":2} to ID 2
[DEBUG PageManager ProcessInput] Handling 'join_game' for ID: 2 with msg: Bot
Bot vs Player mode selected.
Sending request to PairUp for bot match...
clientId: 2
[DEBUG] Created a Bot vs Player game with ClientID: 2 and BotID: 1
[DEBUG] GamePairController: New Match received with GameID 0
Game created and added to map with ID: 0
[DEBUG-Matchmaking PvB] Game created: 0
[DEBUG-Matchmaking PvB] Calling triggerGameDisplay for GameID: 0, P1=2, BotID=1
[DEBUG DisplayConnector] Preparing show_game_display for clientId: 2
[DEBUG DisplayConnector] Found active game 0 for clientId 2
[DEBUG DisplayConnector] Assigned color B to client 2
[DEBUG DisplayConnector] Starting player for game 0: Player 2
[DEBUG App] Queuing message type show_game_display for recipients: [2]
[DEBUG PageManager] Initial turn belongs to human player 2. Waiting for their move.
[DEBUG] Player vs Bot match requested. Sending show_game_display...
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"join_response","id":2,"msg":"Matched with Bot!"} to ID 2
[DEBUG App] Processing queued message type show_game_display
sending(queued) {"clientId":2,"playerId":2,"isBot":false,"player":"Player 2","game_id":0,"gameOver":false,"draw":false,"type":"show_game_display","player_color":"B","starting_player":"Player 2","id":0} to 2
[DEBUG PageManager] Handling get_movable_pieces for player: 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG GamePageController] getMovablePieces: No mandatory capture for player 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,1), currentSquare=(0,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,1) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,1] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,3), currentSquare=(0,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,2) -> Dest(2,1)
[DEBUG rules.findJumpsRec]       Dest square (2,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,4) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,3) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,3] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,5), currentSquare=(0,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,4) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,6) -> Dest(2,7)
[DEBUG rules.findJumpsRec]       Dest square (2,7): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,5) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,5] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,7), currentSquare=(0,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,6) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,8) -> Dest(2,9)
[DEBUG rules.findJumpsRec]     Destination (2,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,7) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,7] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,0), currentSquare=(1,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.findJumpsRec]     Destination (3,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,1) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,0) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,0] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,2), currentSquare=(1,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,2) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,2] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,4), currentSquare=(1,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,4). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,4) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,4] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,6), currentSquare=(1,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,6). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,6) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,6] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,1), currentSquare=(2,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,0)
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,2)
[DEBUG GamePageController] getMovablePieces: Piece at [2,1] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,3), currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,3) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,2)
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,4)
[DEBUG GamePageController] getMovablePieces: Piece at [2,3] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,5), currentSquare=(2,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,5) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,4)
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,6)
[DEBUG GamePageController] getMovablePieces: Piece at [2,5] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,7), currentSquare=(2,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,7) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,7) -> (3,6)
[DEBUG GamePageController] getMovablePieces: Piece at [2,7] has 1 valid moves.
[DEBUG GamePageController] getMovablePieces: Returning movable pieces for player 2: [[2, 1], [2, 3], [2, 5], [2, 7]]
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[2,1],[2,3],[2,5],[2,7]]} to ID 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[2,1],[2,3],[2,5],[2,7]]} to ID 2
[DEBUG] Handling get_allowed_moves from player: 2
[DEBUG DisplayConnector] Getting allowed moves for square [2, 3] from player Player 2
[DEBUG DisplayConnector] Board locked for get_allowed_moves (Player 2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,3), currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,3) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,2)
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,4)
[DEBUG DisplayConnector] handleGetAllowedMoves: Found 2 legal moves for [2, 3]
[DEBUG DisplayConnector] Board unlocked after get_allowed_moves (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"valid_moves","legal_moves":[[3,2],[3,4]],"id":0} to ID 2
[DEBUG PageManager] Handling get_movable_pieces for player: 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG GamePageController] getMovablePieces: No mandatory capture for player 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,1), currentSquare=(0,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,1) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,1] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,3), currentSquare=(0,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,2) -> Dest(2,1)
[DEBUG rules.findJumpsRec]       Dest square (2,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,4) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,3) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,3] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,5), currentSquare=(0,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,4) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,6) -> Dest(2,7)
[DEBUG rules.findJumpsRec]       Dest square (2,7): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,5) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,5] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,7), currentSquare=(0,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,6) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,8) -> Dest(2,9)
[DEBUG rules.findJumpsRec]     Destination (2,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,7) -----
[DEBUG GamePageController] getMovablePieces: Piece at [0,7] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,0), currentSquare=(1,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.findJumpsRec]     Destination (3,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,1) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,0) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,0] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,2), currentSquare=(1,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,2) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,2] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,4), currentSquare=(1,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,4). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,4) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,4] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,6), currentSquare=(1,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,6). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,6) -----
[DEBUG GamePageController] getMovablePieces: Piece at [1,6] has NO valid moves in current context.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,1), currentSquare=(2,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,0)
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,2)
[DEBUG GamePageController] getMovablePieces: Piece at [2,1] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,3), currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,3) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,2)
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,4)
[DEBUG GamePageController] getMovablePieces: Piece at [2,3] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,5), currentSquare=(2,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,5) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,4)
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,6)
[DEBUG GamePageController] getMovablePieces: Piece at [2,5] has 2 valid moves.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,7), currentSquare=(2,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,7) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,7) -> (3,6)
[DEBUG GamePageController] getMovablePieces: Piece at [2,7] has 1 valid moves.
[DEBUG GamePageController] getMovablePieces: Returning movable pieces for player 2: [[2, 1], [2, 3], [2, 5], [2, 7]]
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[2,1],[2,3],[2,5],[2,7]]} to ID 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[2,1],[2,3],[2,5],[2,7]]} to ID 2
[DEBUG] Handling get_allowed_moves from player: 2
[DEBUG DisplayConnector] Getting allowed moves for square [2, 3] from player Player 2
[DEBUG DisplayConnector] Board locked for get_allowed_moves (Player 2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,3), currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(3,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,3) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,2)
[DEBUG rules.findNormal] Adding valid normal move: (2,3) -> (3,4)
[DEBUG DisplayConnector] handleGetAllowedMoves: Found 2 legal moves for [2, 3]
[DEBUG DisplayConnector] Board unlocked after get_allowed_moves (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"valid_moves","legal_moves":[[3,2],[3,4]],"id":0} to ID 2
[DEBUG] Handling move request from player: 2
[DEBUG DisplayConnector] Handling move request from player 2
[DEBUG DisplayConnector] Board locked for human move processing (Player 2)
[DEBUG DisplayConnector] Validating human move: (2,3) -> (3,2) for Player 2
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG DisplayConnector] Human move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Validating move: (2,3) -> (3,2) for Player 2
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG GamePlay.processAndExecuteMove] Move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Is this step a capture? false
[DEBUG Board.execute] Executing move: (2,3) -> (3,2) Capture: false Promote: false
[DEBUG Board.execute] Start square state before: hasPiece=true, color=B, isKing=false
[DEBUG Board.execute] End square state before: hasPiece=false, color=null
[DEBUG Board.execute] Start square state AFTER remove: hasPiece=false, color=null
[DEBUG Board.execute] End square state AFTER place: hasPiece=true, color=B, isKing=false
[DEBUG GamePlay.processAndExecuteMove] Move executed. Board state updated.

------------------
|..bb..bb..bb..bb|
|bb..bb..bb..bb..|
|..bb......bb..bb|
|....bb..........|
|................|
|ww..ww..ww..ww..|
|..ww..ww..ww..ww|
|ww..ww..ww..ww..|
------------------
[DEBUG DisplayConnector] Human move step executed successfully by player 2
[DEBUG DisplayConnector] Human move was not a capture.
[DEBUG DisplayConnector] Board unlocked after human move processing (Player 2)
[DEBUG DisplayConnector] Human turn ends for Player 2. Checking for game over and potentially switching turn.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,1), currentSquare=(0,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,1) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,3), currentSquare=(0,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,2) -> Dest(2,1)
[DEBUG rules.findJumpsRec]       Dest square (2,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,4) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,3) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,5), currentSquare=(0,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,4) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,6) -> Dest(2,7)
[DEBUG rules.findJumpsRec]       Dest square (2,7): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,5) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,7), currentSquare=(0,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,6) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,8) -> Dest(2,9)
[DEBUG rules.findJumpsRec]     Destination (2,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,7) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,0), currentSquare=(1,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.findJumpsRec]     Destination (3,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,1) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,0) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,2), currentSquare=(1,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,2) -----
[DEBUG rules.findNormal] Adding valid normal move: (1,2) -> (2,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,4), currentSquare=(1,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,4). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,4) -----
[DEBUG rules.findNormal] Adding valid normal move: (1,4) -> (2,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,6), currentSquare=(1,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,6). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,6) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,1), currentSquare=(2,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,0)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,5), currentSquare=(2,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,5) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,4)
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,7), currentSquare=(2,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,7) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,7) -> (3,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(3,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (3,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (3,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(3,2) -----
[DEBUG rules.findNormal] Adding valid normal move: (3,2) -> (4,1)
[DEBUG rules.findNormal] Adding valid normal move: (3,2) -> (4,3)
[DEBUG DisplayConnector] Turn switched to Player 1
[DEBUG DisplayConnector] Bot's turn (Player 1) after human move. Requesting move...
[DEBUG BotII.requestMove] === BotII Requesting Move ===
[DEBUG BotII.requestMove] Bot playstyle aggressive: false
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG BotII.requestMove] rules.isCaptureAvailableForPlayer reports: false
[DEBUG BotII.determineMoves] Starting move determination. Strategy aggressive: false
[DEBUG BotII.determineMoves] === Processing piece at (5,0) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,0), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.findJumpsRec]     Destination (3,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(4,1) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,0) -> (4,1)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,0): 1 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,0) -> (4,1)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,0) -> (4,1) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,0)->(4,1) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 1 rated moves for piece (5,0). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,0) ===
[DEBUG BotII.determineMoves] === Processing piece at (5,2) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,2), currentSquare=(5,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,2) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,2) -> (4,1)
[DEBUG rules.findNormal] Adding valid normal move: (5,2) -> (4,3)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,2): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,2) -> (4,1)
[DEBUG BotII.determineMoves]   Raw move returned: (5,2) -> (4,3)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,2) -> (4,1) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,2)->(4,1) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,2) -> (4,3) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,2)->(4,3) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,2). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,2) ===
[DEBUG BotII.determineMoves] === Processing piece at (5,4) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,4)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,4), currentSquare=(5,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,4) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,3)
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,5)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,4): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,4) -> (4,3)
[DEBUG BotII.determineMoves]   Raw move returned: (5,4) -> (4,5)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,4) -> (4,3) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,4)->(4,3) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,4) -> (4,5) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,4)->(4,5) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,4). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,4) ===
[DEBUG BotII.determineMoves] === Processing piece at (5,6) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,6), currentSquare=(5,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,6) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,5)
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,7)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,6): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,6) -> (4,5)
[DEBUG BotII.determineMoves]   Raw move returned: (5,6) -> (4,7)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,6) -> (4,5) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,6)->(4,5) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,6) -> (4,7) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,6)->(4,7) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,6). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,6) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,1) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,1)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,1), currentSquare=(6,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,1) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,1): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,1)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,1)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,1) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,3) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,3), currentSquare=(6,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,3). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,3) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,3): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,3)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,3)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,3) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,5) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,5)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,5), currentSquare=(6,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,5). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,5) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,5): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,5)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,5)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,5) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,7) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,7)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,7), currentSquare=(6,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,7). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,7) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,7): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,7)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,7)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,7) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,0) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,0)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,0), currentSquare=(7,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,0). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.findJumpsRec]     Destination (5,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,1) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,0) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,0): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,0)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,0)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,0) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,2) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,2), currentSquare=(7,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,2) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,2): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,2)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,2)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,2) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,4) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,4)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,4), currentSquare=(7,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,3) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,5) -> Dest(5,6)
[DEBUG rules.findJumpsRec]       Dest square (5,6): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,4) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,4): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,4)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,4)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,4) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,6) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,6), currentSquare=(7,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,5) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,7) -> Dest(5,8)
[DEBUG rules.findJumpsRec]     Destination (5,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,6) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,6): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,6)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,6)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,6) ===
[DEBUG BotII.determineMoves] Finished move determination. Total pieces with possible moves: 4
[DEBUG BotII.requestMove] Total rated moves generated by determineMoves: 7
[DEBUG BotII.requestMove] Filtering FOR normal moves (capture not mandatory).
[DEBUG BotII.requestMove]   Adding normal move: (5,0)->(4,1) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,2)->(4,1) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,2)->(4,3) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,4)->(4,3) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,4)->(4,5) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,6)->(4,5) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,6)->(4,7) ELO: 4
[DEBUG BotII.requestMove] Sorted moves (Passive - Low ELO first)
  -> (5,0) -> (4,1) ELO: 4
  -> (5,2) -> (4,1) ELO: 4
  -> (5,2) -> (4,3) ELO: 4
  -> (5,4) -> (4,3) ELO: 4
  -> (5,4) -> (4,5) ELO: 4
  -> (5,6) -> (4,5) ELO: 4
  -> (5,6) -> (4,7) ELO: 4
[DEBUG BotII.requestMove] Final ordered list has 7 potential moves. Adding to this.moves.
[DEBUG BotII.requestMove] Selected best move: (5,0) -> (4,1)
[DEBUG BotII.requestMove] === BotII Returning Move(s) ===
[DEBUG DisplayConnector] Bot attempting move: (5,0) -> (4,1)
[DEBUG DisplayConnector] Board locked for bot move processing (Bot 1)
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG DisplayConnector] Bot move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Validating move: (5,0) -> (4,1) for Player 1
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG GamePlay.processAndExecuteMove] Move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Is this step a capture? false
[DEBUG Board.execute] Executing move: (5,0) -> (4,1) Capture: false Promote: false
[DEBUG Board.execute] Start square state before: hasPiece=true, color=W, isKing=false
[DEBUG Board.execute] End square state before: hasPiece=false, color=null
[DEBUG Board.execute] Start square state AFTER remove: hasPiece=false, color=null
[DEBUG Board.execute] End square state AFTER place: hasPiece=true, color=W, isKing=false
[DEBUG GamePlay.processAndExecuteMove] Move executed. Board state updated.

------------------
|..bb..bb..bb..bb|
|bb..bb..bb..bb..|
|..bb......bb..bb|
|....bb..........|
|..ww............|
|....ww..ww..ww..|
|..ww..ww..ww..ww|
|ww..ww..ww..ww..|
------------------
[DEBUG DisplayConnector] Board unlocked after bot move processing attempt (Bot 1)
[DEBUG DisplayConnector] Bot move executed successfully. Checking game state...
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(4,1), currentSquare=(4,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (4,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (4,1) -> Mid(3,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (4,1) -> Mid(3,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Valid jump condition MET 
[DEBUG rules.findJumpsRec]       Making RECURSIVE call for jump to (2,3). Passing visited: [4,1]
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(4,1), currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: [4,1]
[DEBUG rules.findJumpsRec]   Checking jumps from (2,3). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(1,2) -> Dest(0,1)
[DEBUG rules.findJumpsRec]       Dest square (0,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,3) -> Mid(1,4) -> Dest(0,5)
[DEBUG rules.findJumpsRec]       Dest square (0,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   No further jumps found from (2,3). Checking if this move should be added.
[DEBUG rules.findJumpsRec]     Adding jump move to list: (4,1) -> (2,3) 
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,3) -----
[DEBUG rules.findJumpsRec]   Further jumps WERE found from (4,1). Not adding this intermediate step as a final move.
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(4,1) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,2), currentSquare=(5,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,2) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,4), currentSquare=(5,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,4) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,6), currentSquare=(5,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,6) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,1), currentSquare=(6,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,1) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,3), currentSquare=(6,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,3). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,3) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,5), currentSquare=(6,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,5). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,5) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,7), currentSquare=(6,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,7). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,7) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,0), currentSquare=(7,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,0). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.findJumpsRec]     Destination (5,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,1) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,0) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,2), currentSquare=(7,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,2) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,4), currentSquare=(7,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,3) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,5) -> Dest(5,6)
[DEBUG rules.findJumpsRec]       Dest square (5,6): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,4) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle B != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (4,1) to (2,3) over (3,2) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (4,1)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,6), currentSquare=(7,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,5) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,7) -> Dest(5,8)
[DEBUG rules.findJumpsRec]     Destination (5,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,6) -----
[DEBUG DisplayConnector] Bot turn finished. Switched back to Player 2
[DEBUG App] Queuing message type move_made_by_other_player_or_bot for recipients: [2]
[DEBUG DisplayConnector] Sending final move_ack to player 2. Next turn: 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"move_ack","current_move":"Player 2","id":2,"msg":"Move processed successfully."} to ID 2
[DEBUG App] Processing queued message type move_made_by_other_player_or_bot
sending(queued) {"clientId":2,"playerId":0,"isBot":false,"player":"Bot II","game_id":0,"gameOver":false,"draw":false,"type":"move_made_by_other_player_or_bot","from":[5,0],"to":[4,1],"current_move":"Player 2","id":2} to 2
[DEBUG] Handling move request from player: 2
[DEBUG DisplayConnector] Handling move request from player 2
[DEBUG DisplayConnector] Board locked for human move processing (Player 2)
[DEBUG DisplayConnector] Validating human move: (5,0) -> (4,1) for Player 2
[DEBUG rules.canMovePiece] Fail: Invalid start square or wrong color.
[WARN DisplayConnector] Illegal human move step attempted by player 2
[DEBUG DisplayConnector] Board unlocked after illegal human move attempt (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"error","id":0,"msg":"Illegal move attempt."} to ID 2
[DEBUG PageManager] Handling get_movable_pieces for player: 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG GamePageController] getMovablePieces: Capture is mandatory for player 2
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (3,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG GamePageController] getMovablePieces: Found mandatory capture piece at [3,2]
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(3,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (3,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Valid jump condition MET 
[DEBUG rules.findJumpsRec]       Making RECURSIVE call for jump to (5,0). Passing visited: [3,2]
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: [3,2]
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.findJumpsRec]     Destination (7,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,1) -> Dest(7,2)
[DEBUG rules.findJumpsRec]       Dest square (7,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   No further jumps found from (5,0). Checking if this move should be added.
[DEBUG rules.findJumpsRec]     Adding jump move to list: (3,2) -> (5,0) 
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Further jumps WERE found from (3,2). Not adding this intermediate step as a final move.
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(3,2) -----
[DEBUG GamePageController] getMovablePieces: Piece at [3,2] has 1 valid moves.
[DEBUG GamePageController] getMovablePieces: Returning movable pieces for player 2: [[3, 2]]
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[3,2]]} to ID 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[3,2]]} to ID 2
[DEBUG] Handling get_allowed_moves from player: 2
[DEBUG DisplayConnector] Getting allowed moves for square [3, 2] from player Player 2
[DEBUG DisplayConnector] Board locked for get_allowed_moves (Player 2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(3,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (3,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Valid jump condition MET 
[DEBUG rules.findJumpsRec]       Making RECURSIVE call for jump to (5,0). Passing visited: [3,2]
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: [3,2]
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.findJumpsRec]     Destination (7,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,1) -> Dest(7,2)
[DEBUG rules.findJumpsRec]       Dest square (7,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   No further jumps found from (5,0). Checking if this move should be added.
[DEBUG rules.findJumpsRec]     Adding jump move to list: (3,2) -> (5,0) 
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Further jumps WERE found from (3,2). Not adding this intermediate step as a final move.
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(3,2) -----
[DEBUG DisplayConnector] handleGetAllowedMoves: Found 1 legal moves for [3, 2]
[DEBUG DisplayConnector] Board unlocked after get_allowed_moves (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"valid_moves","legal_moves":[[5,0]],"id":0} to ID 2
[DEBUG PageManager] Handling get_movable_pieces for player: 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG GamePageController] getMovablePieces: Capture is mandatory for player 2
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.isCaptureAvailableFromSquare] Checking captures for Player 2 from square (3,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG GamePageController] getMovablePieces: Found mandatory capture piece at [3,2]
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(3,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (3,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Valid jump condition MET 
[DEBUG rules.findJumpsRec]       Making RECURSIVE call for jump to (5,0). Passing visited: [3,2]
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: [3,2]
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.findJumpsRec]     Destination (7,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,1) -> Dest(7,2)
[DEBUG rules.findJumpsRec]       Dest square (7,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   No further jumps found from (5,0). Checking if this move should be added.
[DEBUG rules.findJumpsRec]     Adding jump move to list: (3,2) -> (5,0) 
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Further jumps WERE found from (3,2). Not adding this intermediate step as a final move.
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(3,2) -----
[DEBUG GamePageController] getMovablePieces: Piece at [3,2] has 1 valid moves.
[DEBUG GamePageController] getMovablePieces: Returning movable pieces for player 2: [[3, 2]]
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[3,2]]} to ID 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"movable_pieces_list","id":2,"msg":"List of pieces with available moves.","movable_pieces":[[3,2]]} to ID 2
[DEBUG] Handling get_allowed_moves from player: 2
[DEBUG DisplayConnector] Getting allowed moves for square [3, 2] from player Player 2
[DEBUG DisplayConnector] Board locked for get_allowed_moves (Player 2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(3,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (3,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Valid jump condition MET 
[DEBUG rules.findJumpsRec]       Making RECURSIVE call for jump to (5,0). Passing visited: [3,2]
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(3,2), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: [3,2]
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.findJumpsRec]     Destination (7,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,1) -> Dest(7,2)
[DEBUG rules.findJumpsRec]       Dest square (7,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   No further jumps found from (5,0). Checking if this move should be added.
[DEBUG rules.findJumpsRec]     Adding jump move to list: (3,2) -> (5,0) 
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]     Checking potential jump: (3,2) -> Mid(4,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Further jumps WERE found from (3,2). Not adding this intermediate step as a final move.
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(3,2) -----
[DEBUG DisplayConnector] handleGetAllowedMoves: Found 1 legal moves for [3, 2]
[DEBUG DisplayConnector] Board unlocked after get_allowed_moves (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"valid_moves","legal_moves":[[5,0]],"id":0} to ID 2
[DEBUG] Handling move request from player: 2
[DEBUG DisplayConnector] Handling move request from player 2
[DEBUG DisplayConnector] Board locked for human move processing (Player 2)
[DEBUG DisplayConnector] Validating human move: (3,2) -> (5,0) for Player 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG DisplayConnector] Human move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Validating move: (3,2) -> (5,0) for Player 2
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (3,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]  Found valid capture from (3,2) to (5,0) over (4,1) 
[DEBUG rules.isCaptureAvailableForPlayer] Capture found for piece at (3,2)
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG GamePlay.processAndExecuteMove] Move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Is this step a capture? true
[DEBUG Board.execute] Executing move: (3,2) -> (5,0) Capture: true Promote: false
[DEBUG Board.execute] Start square state before: hasPiece=true, color=B, isKing=false
[DEBUG Board.execute] End square state before: hasPiece=false, color=null
[DEBUG Board.execute] Processing capture(s)...
[DEBUG Board.execute]   Detected jump distance: 2 rows. Number of jumps: 1
[DEBUG Board.execute]   Checking middle square for jump 1: (4,1)
[DEBUG Board.execute]     Removing opponent piece at (4,1)
[DEBUG Board.execute] Start square state AFTER remove: hasPiece=false, color=null
[DEBUG Board.execute] End square state AFTER place: hasPiece=true, color=B, isKing=false
[DEBUG GamePlay.processAndExecuteMove] Move executed. Board state updated.

------------------
|..bb..bb..bb..bb|
|bb..bb..bb..bb..|
|..bb......bb..bb|
|................|
|................|
|bb..ww..ww..ww..|
|..ww..ww..ww..ww|
|ww..ww..ww..ww..|
------------------
[DEBUG DisplayConnector] Human move step executed successfully by player 2
[DEBUG DisplayConnector] Human move was not a capture.
[DEBUG DisplayConnector] Board unlocked after human move processing (Player 2)
[DEBUG DisplayConnector] Human turn ends for Player 2. Checking for game over and potentially switching turn.
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,1), currentSquare=(0,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,1) -> Mid(1,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,1) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,3), currentSquare=(0,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,3). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,2) -> Dest(2,1)
[DEBUG rules.findJumpsRec]       Dest square (2,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,2): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,3) -> Mid(1,4) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,3) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,5), currentSquare=(0,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,4) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (1,4): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,5) -> Mid(1,6) -> Dest(2,7)
[DEBUG rules.findJumpsRec]       Dest square (2,7): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,5) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(0,7), currentSquare=(0,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (0,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,6) -> Dest(2,5)
[DEBUG rules.findJumpsRec]       Dest square (2,5): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (1,6): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (0,7) -> Mid(1,8) -> Dest(2,9)
[DEBUG rules.findJumpsRec]     Destination (2,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (0,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(0,7) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,0), currentSquare=(1,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.findJumpsRec]     Destination (3,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,0) -> Mid(2,1) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,0) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,2), currentSquare=(1,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,2). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,1): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,2) -> Mid(2,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,2) -----
[DEBUG rules.findNormal] Adding valid normal move: (1,2) -> (2,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,4), currentSquare=(1,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,4). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,4) -> Mid(2,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,4) -----
[DEBUG rules.findNormal] Adding valid normal move: (1,4) -> (2,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(1,6), currentSquare=(1,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (1,6). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (2,5): HasPiece=true, Color=Black
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (1,6) -> Mid(2,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (1,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(1,6) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,1), currentSquare=(2,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,1). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,1) -> Mid(3,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,0)
[DEBUG rules.findNormal] Adding valid normal move: (2,1) -> (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,5), currentSquare=(2,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,5). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,4): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,5) -> Mid(3,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,5) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,4)
[DEBUG rules.findNormal] Adding valid normal move: (2,5) -> (3,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(2,7), currentSquare=(2,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (2,7). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,6): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (2,7) -> Mid(3,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (2,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(2,7) -----
[DEBUG rules.findNormal] Adding valid normal move: (2,7) -> (3,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: Black
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,3), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,2) -> Dest(2,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,4) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (0,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,6) -> Dest(2,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (1,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(1,8) -> Dest(2,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (0,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,-1) -> Dest(3,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,2), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,4), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (1,6), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (2,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=B
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle B != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(2,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (1,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,1), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,5), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (2,7), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (2,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,0), King=false, Color=B
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(7,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=true (Comparing middle W != player B)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = true
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,0)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player Black
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,0), currentSquare=(5,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,0). King status: false. Color: Black
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,-1) -> Dest(7,-2)
[DEBUG rules.findJumpsRec]     Destination (7,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,0) -> Mid(6,1) -> Dest(7,2)
[DEBUG rules.findJumpsRec]       Dest square (7,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,0) -----
[DEBUG DisplayConnector] Turn switched to Player 1
[DEBUG DisplayConnector] Bot's turn (Player 1) after human move. Requesting move...
[DEBUG BotII.requestMove] === BotII Requesting Move ===
[DEBUG BotII.requestMove] Bot playstyle aggressive: false
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG BotII.requestMove] rules.isCaptureAvailableForPlayer reports: false
[DEBUG BotII.determineMoves] Starting move determination. Strategy aggressive: false
[DEBUG BotII.determineMoves] === Processing piece at (5,2) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,2), currentSquare=(5,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,1) -> Dest(3,0)
[DEBUG rules.findJumpsRec]       Dest square (3,0): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,1): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,2) -> Mid(4,3) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,2) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,2) -> (4,1)
[DEBUG rules.findNormal] Adding valid normal move: (5,2) -> (4,3)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,2): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,2) -> (4,1)
[DEBUG BotII.determineMoves]   Raw move returned: (5,2) -> (4,3)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,2) -> (4,1) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,2)->(4,1) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,2) -> (4,3) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,2)->(4,3) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,2). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,2) ===
[DEBUG BotII.determineMoves] === Processing piece at (5,4) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,4)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,4), currentSquare=(5,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,4) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,3)
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,5)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,4): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,4) -> (4,3)
[DEBUG BotII.determineMoves]   Raw move returned: (5,4) -> (4,5)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,4) -> (4,3) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,4)->(4,3) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,4) -> (4,5) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,4)->(4,5) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,4). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,4) ===
[DEBUG BotII.determineMoves] === Processing piece at (5,6) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (5,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,6), currentSquare=(5,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,6) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,5)
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,7)
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (5,6): 2 moves found.
[DEBUG BotII.determineMoves]   Raw move returned: (5,6) -> (4,5)
[DEBUG BotII.determineMoves]   Raw move returned: (5,6) -> (4,7)
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,6) -> (4,5) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,6)->(4,5) with final ELO: 4
[DEBUG BotII.determineMoves]   --- Evaluating move: (5,6) -> (4,7) ---
[DEBUG BotII.determineMoves]     Is capture? false
[DEBUG BotII.determineMoves]     Moves to king: 4, King proximity bonus: 3. New elo: 4
[DEBUG BotII.determineMoves]     Adding MoveRating: (5,6)->(4,7) with final ELO: 4
[DEBUG BotII.determineMoves]   Found 2 rated moves for piece (5,6). Adding Pair to possibleMoves.
[DEBUG BotII.determineMoves] === Finished processing piece at (5,6) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,1) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,1)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,1), currentSquare=(6,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,1) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,1): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,1)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,1)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,1) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,3) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,3)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,3), currentSquare=(6,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,3). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,3) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,3): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,3)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,3)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,3) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,5) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,5)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,5), currentSquare=(6,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,5). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,5) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,5): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,5)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,5)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,5) ===
[DEBUG BotII.determineMoves] === Processing piece at (6,7) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (6,7)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,7), currentSquare=(6,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,7). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,7) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (6,7): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (6,7)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (6,7)
[DEBUG BotII.determineMoves] === Finished processing piece at (6,7) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,0) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,0)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,0), currentSquare=(7,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,0). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.findJumpsRec]     Destination (5,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,1) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,0) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,0): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,0)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,0)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,0) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,2) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,2), currentSquare=(7,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,2) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,2): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,2)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,2)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,2) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,4) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,4)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,4), currentSquare=(7,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,3) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,5) -> Dest(5,6)
[DEBUG rules.findJumpsRec]       Dest square (5,6): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,4) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,4): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,4)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,4)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,4) ===
[DEBUG BotII.determineMoves] === Processing piece at (7,6) ===
[DEBUG BotII.determineMoves]   Calling rules.getMovesForSquare for (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,6), currentSquare=(7,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,5) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,7) -> Dest(5,8)
[DEBUG rules.findJumpsRec]     Destination (5,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,6) -----
[DEBUG BotII.determineMoves]   Result from rules.getMovesForSquare for (7,6): 0 moves found.
[DEBUG BotII.determineMoves]   No legal moves were returned for piece at (7,6)
[DEBUG BotII.determineMoves]   No rated moves generated for piece (7,6)
[DEBUG BotII.determineMoves] === Finished processing piece at (7,6) ===
[DEBUG BotII.determineMoves] Finished move determination. Total pieces with possible moves: 3
[DEBUG BotII.requestMove] Total rated moves generated by determineMoves: 6
[DEBUG BotII.requestMove] Filtering FOR normal moves (capture not mandatory).
[DEBUG BotII.requestMove]   Adding normal move: (5,2)->(4,1) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,2)->(4,3) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,4)->(4,3) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,4)->(4,5) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,6)->(4,5) ELO: 4
[DEBUG BotII.requestMove]   Adding normal move: (5,6)->(4,7) ELO: 4
[DEBUG BotII.requestMove] Sorted moves (Passive - Low ELO first)
  -> (5,2) -> (4,1) ELO: 4
  -> (5,2) -> (4,3) ELO: 4
  -> (5,4) -> (4,3) ELO: 4
  -> (5,4) -> (4,5) ELO: 4
  -> (5,6) -> (4,5) ELO: 4
  -> (5,6) -> (4,7) ELO: 4
[DEBUG BotII.requestMove] Final ordered list has 6 potential moves. Adding to this.moves.
[DEBUG BotII.requestMove] Selected best move: (5,2) -> (4,1)
[DEBUG BotII.requestMove] === BotII Returning Move(s) ===
[DEBUG DisplayConnector] Bot attempting move: (5,2) -> (4,1)
[DEBUG DisplayConnector] Board locked for bot move processing (Bot 1)
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG DisplayConnector] Bot move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Validating move: (5,2) -> (4,1) for Player 1
[DEBUG rules.isLegal] OK: Regular normal forward move
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,1) -> Dest(3,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.canMovePiece] OK: Move is legal and satisfies capture rule (if applicable).
[DEBUG GamePlay.processAndExecuteMove] Move validation PASSED.
[DEBUG GamePlay.processAndExecuteMove] Is this step a capture? false
[DEBUG Board.execute] Executing move: (5,2) -> (4,1) Capture: false Promote: false
[DEBUG Board.execute] Start square state before: hasPiece=true, color=W, isKing=false
[DEBUG Board.execute] End square state before: hasPiece=false, color=null
[DEBUG Board.execute] Start square state AFTER remove: hasPiece=false, color=null
[DEBUG Board.execute] End square state AFTER place: hasPiece=true, color=W, isKing=false
[DEBUG GamePlay.processAndExecuteMove] Move executed. Board state updated.

------------------
|..bb..bb..bb..bb|
|bb..bb..bb..bb..|
|..bb......bb..bb|
|................|
|..ww............|
|bb......ww..ww..|
|..ww..ww..ww..ww|
|ww..ww..ww..ww..|
------------------
[DEBUG DisplayConnector] Board unlocked after bot move processing attempt (Bot 1)
[DEBUG DisplayConnector] Bot move executed successfully. Checking game state...
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(4,1), currentSquare=(4,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (4,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (4,1) -> Mid(3,0) -> Dest(2,-1)
[DEBUG rules.findJumpsRec]     Destination (2,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (4,1) -> Mid(3,2) -> Dest(2,3)
[DEBUG rules.findJumpsRec]       Dest square (2,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (3,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (4,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(4,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (4,1) -> (3,0)
[DEBUG rules.findNormal] Adding valid normal move: (4,1) -> (3,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,4), currentSquare=(5,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,3) -> Dest(3,2)
[DEBUG rules.findJumpsRec]       Dest square (3,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,3): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,4) -> Mid(4,5) -> Dest(3,6)
[DEBUG rules.findJumpsRec]       Dest square (3,6): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,4) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,3)
[DEBUG rules.findNormal] Adding valid normal move: (5,4) -> (4,5)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(5,6), currentSquare=(5,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (5,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,5) -> Dest(3,4)
[DEBUG rules.findJumpsRec]       Dest square (3,4): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (4,5): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (5,6) -> Mid(4,7) -> Dest(3,8)
[DEBUG rules.findJumpsRec]     Destination (3,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (5,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(5,6) -----
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,5)
[DEBUG rules.findNormal] Adding valid normal move: (5,6) -> (4,7)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,1), currentSquare=(6,1) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,1). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,0) -> Dest(4,-1)
[DEBUG rules.findJumpsRec]     Destination (4,-1) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,1) -> Mid(5,2) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,1).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,1) -----
[DEBUG rules.findNormal] Adding valid normal move: (6,1) -> (5,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,3), currentSquare=(6,3) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,3). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,2) -> Dest(4,1)
[DEBUG rules.findJumpsRec]       Dest square (4,1): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (5,2): HasPiece=false, Color=null
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,3) -> Mid(5,4) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,3).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,3) -----
[DEBUG rules.findNormal] Adding valid normal move: (6,3) -> (5,2)
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,5), currentSquare=(6,5) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,5). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,4) -> Dest(4,3)
[DEBUG rules.findJumpsRec]       Dest square (4,3): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,4): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,5) -> Mid(5,6) -> Dest(4,7)
[DEBUG rules.findJumpsRec]       Dest square (4,7): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,5).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,5) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(6,7), currentSquare=(6,7) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (6,7). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,6) -> Dest(4,5)
[DEBUG rules.findJumpsRec]       Dest square (4,5): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (5,6): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (6,7) -> Mid(5,8) -> Dest(4,9)
[DEBUG rules.findJumpsRec]     Destination (4,9) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (6,7).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(6,7) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,0), currentSquare=(7,0) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,0). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.findJumpsRec]     Destination (5,-2) is out of bounds.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,0) -> Mid(6,1) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,0).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,0) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,2), currentSquare=(7,2) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,2). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,1) -> Dest(5,0)
[DEBUG rules.findJumpsRec]       Dest square (5,0): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,1): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,2) -> Mid(6,3) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,2).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,2) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,4), currentSquare=(7,4) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,4). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,3) -> Dest(5,2)
[DEBUG rules.findJumpsRec]       Dest square (5,2): HasPiece=false
[DEBUG rules.findJumpsRec]       Middle square (6,3): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,4) -> Mid(6,5) -> Dest(5,6)
[DEBUG rules.findJumpsRec]       Dest square (5,6): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,4).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,4) -----
[DEBUG rules.isCaptureAvailableForPlayer] Checking for color: White
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (4,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,0) -> Dest(2,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(3,2) -> Dest(2,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (3,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (4,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,3) -> Dest(3,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (5,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,5) -> Dest(3,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (4,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(4,7) -> Dest(3,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (5,6)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,1), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,0) -> Dest(4,-1)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,1)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,3), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,2) -> Dest(4,1)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,2):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=null
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=false
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle null != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,3)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,5), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,4) -> Dest(4,3)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,4):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,7)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,5)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (6,7), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,6) -> Dest(4,5)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (5,6):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(5,8) -> Dest(4,9)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (6,7)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,0), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,-1) -> Dest(5,-2)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,0)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,2), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,1) -> Dest(5,0)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,1):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,2)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,4), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,3) -> Dest(5,2)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=true (Dest=hasPiece=false)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,3):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,6)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,4)
[DEBUG rules.hasLegalCaptureFromSquare] Checking piece at (7,6), King=false, Color=W
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,5) -> Dest(5,4)
[DEBUG rules.hasLegalCaptureFromSquare]     LandingOK=false (Dest=hasPiece=true)
[DEBUG rules.hasLegalCaptureFromSquare]     Middle Square (6,5):
[DEBUG rules.hasLegalCaptureFromSquare]       middleIsNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleHasPiece=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColor=W
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorNotNull=true
[DEBUG rules.hasLegalCaptureFromSquare]       middleColorIsOpponent=false (Comparing middle W != player W)
[DEBUG rules.hasLegalCaptureFromSquare]     Calculated middleOk = false
[DEBUG rules.hasLegalCaptureFromSquare]   Testing jump path: Mid(6,7) -> Dest(5,8)
[DEBUG rules.hasLegalCaptureFromSquare]   Path out of bounds.
[DEBUG rules.hasLegalCaptureFromSquare]   No legal captures found from (7,6)
[DEBUG rules.isCaptureAvailableForPlayer] No captures found for player White
[DEBUG rules.findJumpsRec] ----- Entered for originalStart=(7,6), currentSquare=(7,6) -----
[DEBUG rules.findJumpsRec]   Visited in this sequence: []
[DEBUG rules.findJumpsRec]   Checking jumps from (7,6). King status: false. Color: White
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,5) -> Dest(5,4)
[DEBUG rules.findJumpsRec]       Dest square (5,4): HasPiece=true
[DEBUG rules.findJumpsRec]       Middle square (6,5): HasPiece=true, Color=White
[DEBUG rules.findJumpsRec]       Jump condition NOT MET.
[DEBUG rules.findJumpsRec]     Checking potential jump: (7,6) -> Mid(6,7) -> Dest(5,8)
[DEBUG rules.findJumpsRec]     Destination (5,8) is out of bounds.
[DEBUG rules.findJumpsRec]   Finished checking jumps from the original starting square (7,6).
[DEBUG rules.findJumpsRec] ----- Exiting for currentSquare=(7,6) -----
[DEBUG DisplayConnector] Bot turn finished. Switched back to Player 2
[DEBUG App] Queuing message type move_made_by_other_player_or_bot for recipients: [2]
[DEBUG DisplayConnector] Sending final move_ack to player 2. Next turn: 2
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"move_ack","current_move":"Player 2","id":2,"msg":"Move processed successfully."} to ID 2
[DEBUG App] Processing queued message type move_made_by_other_player_or_bot
sending(queued) {"clientId":2,"playerId":0,"isBot":false,"player":"Bot II","game_id":0,"gameOver":false,"draw":false,"type":"move_made_by_other_player_or_bot","from":[5,2],"to":[4,1],"current_move":"Player 2","id":2} to 2
[DEBUG] Handling move request from player: 2
[DEBUG DisplayConnector] Handling move request from player 2
[DEBUG DisplayConnector] Board locked for human move processing (Player 2)
[DEBUG DisplayConnector] Validating human move: (5,2) -> (4,1) for Player 2
[DEBUG rules.canMovePiece] Fail: Invalid start square or wrong color.
[WARN DisplayConnector] Illegal human move step attempted by player 2
[DEBUG DisplayConnector] Board unlocked after illegal human move attempt (Player 2)
sending {"clientId":2,"playerId":0,"isBot":false,"game_id":0,"gameOver":false,"draw":false,"type":"error","id":0,"msg":"Illegal move attempt."} to ID 2
[DEBUG-Matchmaking] Starting matching process.
[DEBUG-Matchmaking] Players in queue: 0
[DEBUG-Matchmaking] Matching process finished.
[DEBUG-Matchmaking] Starting matching process.
[DEBUG-Matchmaking] Players in queue: 0
[DEBUG-Matchmaking] Matching process finished.
